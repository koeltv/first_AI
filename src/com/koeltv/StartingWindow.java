package com.koeltv;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

public class StartingWindow extends JDialog {
	private JPanel contentPane;
	private JButton buttonOK;
	private JButton buttonCancel;
	private JPanel mainPanel;

	private final JButton startingPoint;

	private final JButton endPoint;

	private final ArrayList<Obstacle> obstacles = new ArrayList<>();

	public StartingWindow() {
		setContentPane(contentPane);
		setModal(true);
		setTitle("Configuration Screen");
		getRootPane().setDefaultButton(buttonOK);
		mainPanel.setLayout(null);

		buttonOK.addActionListener(e -> onOK());
		buttonCancel.addActionListener(e -> onCancel());

		endPoint = new JButton();
		endPoint.setBounds(MainWindow.width / 2, 15, 10, 10);
		endPoint.setBackground(Color.RED);
		mainPanel.add(endPoint);
		endPoint.addMouseMotionListener(new MouseAdapter() {
			@Override
			public void mouseDragged(MouseEvent E) {
				int x = endPoint.getX(), y = endPoint.getY(), width = endPoint.getWidth(), height = endPoint.getHeight();

				x += E.getX() - endPoint.getWidth() / 2;
				if (x < 0) x = 0;
				else if (x + width > getWidth()) x -= x + width - getWidth();

				y += E.getY() - endPoint.getHeight() / 2;
				if (y < 0) y = 0;
				else if (y + height > getHeight()) y -= y + height - getHeight();
				endPoint.setBounds(x, y, width, height);
			}
		});

		startingPoint = new JButton();
		startingPoint.setBounds(400, 650, 10, 10);
		startingPoint.setBackground(Color.GREEN);
		mainPanel.add(startingPoint);
		startingPoint.addMouseMotionListener(new MouseAdapter() {
			@Override
			public void mouseDragged(MouseEvent E) {
				int x = startingPoint.getX(), y = startingPoint.getY(), width = startingPoint.getWidth(), height = startingPoint.getHeight();

				x += E.getX() - startingPoint.getWidth() / 2;
				if (x < 0) x = 0;
				else if (x + width > getWidth()) x -= x + width - getWidth();

				y += E.getY() - startingPoint.getHeight() / 2;
				if (y < 0) y = 0;
				else if (y + height > getHeight()) y -= y + height - getHeight();
				startingPoint.setBounds(x, y, width, height);
			}
		});

		// call onCancel() when cross is clicked
		setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				onCancel();
			}
		});

		// call onCancel() on ESCAPE
		contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

		mainPanel.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				super.mouseClicked(e);
				System.out.println("Creating obstacle");
				Rectangle dimensions = new Rectangle(e.getX(), e.getY(), 50, 20);
				Obstacle obstacle = new Obstacle(dimensions);

				obstacles.add(obstacle);
				mainPanel.add(obstacle);
				repaint();
			}
		});
	}

	private void onOK() {
		MainWindow.width = mainPanel.getWidth();
		MainWindow.height = mainPanel.getHeight();

		MainWindow.start = new Vector(startingPoint.getX() + (double) startingPoint.getWidth() / 2, startingPoint.getY() + (double) startingPoint.getHeight() / 2);
		MainWindow.goal = new Vector(endPoint.getX() + (double) endPoint.getWidth() / 2, endPoint.getY() + (double) endPoint.getHeight() / 2);
		obstacles.forEach(obstacle -> MainWindow.obstacles.add(obstacle.getDimensions()));

		dispose();
	}

	private void onCancel() {
		dispose();
		System.exit(0);
	}

	public static void main(String[] args) {
		StartingWindow dialog = new StartingWindow();
		dialog.pack();
		dialog.setVisible(true);

		MainWindow mainWindow = new MainWindow();
		new Thread(mainWindow).start();
	}

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		contentPane = new JPanel();
		contentPane.setLayout(new GridBagLayout());
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		contentPane.add(panel1, gbc);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new GridBagLayout());
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		panel1.add(panel2, gbc);
		buttonOK = new JButton();
		buttonOK.setText("OK");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(buttonOK, gbc);
		buttonCancel = new JButton();
		buttonCancel.setText("Cancel");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel2.add(buttonCancel, gbc);
		mainPanel = new JPanel();
		mainPanel.setLayout(new BorderLayout(0, 0));
		mainPanel.setMinimumSize(new Dimension(0, 0));
		mainPanel.setPreferredSize(new Dimension(800, 700));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;
		gbc.weighty = 1.0;
		gbc.fill = GridBagConstraints.BOTH;
		contentPane.add(mainPanel, gbc);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

}
